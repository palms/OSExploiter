Exploit 2
by Saul Laufer
_________

Vulnerability:
target2.c contains code that copies a c-string using a for loop, iterating through each element in the char array. The vulnerability is an off-by-one error, where the for loop intends to iterate buffer.length() times, and instead iterates buffer.length() + 1 times, using the <= operator instead of the < operator, copying 241 bytes, instead of the allocated 240.

Exploit:
The above vulnerability allows the buffer to be overflowed by a single byte. This byte being the least significant byte in the stack frame pointer (%ebp). %ebp will become %esp upon return of the function bar, and replacing it with an address that will execute shell code allows us to obtain the shell. Because the change is limited to the least significant byte, we replace &epb with the address for buffer.length() - 4, which is possible with our limited overflow. The address in buffer.length() - 4 directs to an instructions inside the injection buffer; a NOP slide leading to shell code.