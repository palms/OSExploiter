Exploit 4
by Saul Laufer
_________

Vulnerability:
target4.c includes code using a version of malloc and free. Two variables have memory allocated to them, p and q. What makes this program vulnerable to attack is the memory allocated to q is free’d twice, resulting in unintentional behavior, which the exploit takes advantage of for an attack.

Exploit:
Upon examination of the program’s memory, the beginning of p is within range of q (208 bytes “before”). Hence the buffer size 2 * 208.

	q->s.r = p->s.r;
	p->s.r->s.l = q;

The above code in tfree() of tmalloc.c allows us to write the value of q to an arbitrary location. We can write the value as the address of our buffer, which will be the beginning of p (since this is the area where obsd_strlcpy will write our buffer), and we can use the %eip value of foo as the arbitrary location. This allows us to write a return into shell code from our buffer, using the return address saved in foo’s frame.

We will write the buffer to the left ptr and the %eip value to the right ptr, as seen in the code, where 200 and 204 are written to (the ptr values).
  